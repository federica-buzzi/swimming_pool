/*
Deployment script for swimming_pool_DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "swimming_pool_DB"
:setvar DefaultFilePrefix "swimming_pool_DB"
:setvar DefaultDataPath "C:\Users\User\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"
:setvar DefaultLogPath "C:\Users\User\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Dropping unnamed constraint on [dbo].[SwimSession]...';


GO
ALTER TABLE [dbo].[SwimSession] DROP CONSTRAINT [DF__SwimSessi__SwimS__7FEAFD3E];


GO
PRINT N'Altering [dbo].[SwimSession]...';


GO
ALTER TABLE [dbo].[SwimSession] ALTER COLUMN [SwimSessionMaxCapacity] INT NULL;


GO
PRINT N'Creating unnamed constraint on [dbo].[SwimSession]...';


GO
ALTER TABLE [dbo].[SwimSession]
    ADD DEFAULT 5 FOR [SwimSessionMaxCapacity];


GO
PRINT N'Refreshing [dbo].[V_Full_Reservation_User]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[V_Full_Reservation_User]';


GO
PRINT N'Creating [dbo].[V_GetRandom]...';


GO
CREATE VIEW [dbo].[V_GetRandom]
	AS SELECT FLOOR(RAND()*10) AS RandomValue
GO
PRINT N'Creating [dbo].[SF_EncryptedPassword]...';


GO
CREATE FUNCTION [dbo].[SF_EncryptedPassword]
(
	@password NVARCHAR(32),
	@salt CHAR(8)
)
RETURNS VARBINARY(32)
AS
BEGIN
	RETURN HASHBYTES('SHA2_256',CONCAT(SUBSTRING(@salt,0,4),@password,SUBSTRING(@salt,4,4)))
END
GO
PRINT N'Creating [dbo].[SF_GenerateSalt]...';


GO
CREATE FUNCTION [dbo].[SF_GenerateSalt]
()
RETURNS CHAR(8)
AS
BEGIN
	DECLARE @saltResult NVARCHAR(8)
	DECLARE @randomValue SMALLINT, @i SMALLINT
	SET @i = 0;
	WHILE @i < 8
	BEGIN
		SET @randomValue = (SELECT RandomValue FROM [V_GetRandom])
		SET @saltResult = CONCAT(@saltResult,@randomValue)
		SET @i = @i + 1;
	END

	RETURN @saltResult


END
GO
PRINT N'Creating [dbo].[SP_User_Insert]...';


GO
CREATE PROCEDURE [dbo].[SP_User_Insert]
	 @firstName NVARCHAR (50), 
     @lastName  NVARCHAR (50),
     @telephone NCHAR (12),
     @email     NVARCHAR (323),
     @password VARBINARY(32), 
     @userName NCHAR(10)
AS
    DECLARE @salt CHAR(8)
    SET @salt = [dbo].SF_GenerateSalt()
	INSERT INTO [User] ([FirstName],[LastName], [Telephone], [Email], [Password], [Salt], [Username]) 
    OUTPUT inserted.IdUser
    VALUES (@firstName, @lastName, @telephone ,@email ,dbo.SF_EncryptedPassword(@password, @salt), @salt, @userName)
GO
PRINT N'Update complete.';


GO
